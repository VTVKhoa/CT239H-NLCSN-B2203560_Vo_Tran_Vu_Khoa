@model A23017_Cloud.Models.WoD

@{
    ViewBag.Title = "CreateManual";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
}

@{
    string[] phonemes = new string[]
    {
        "iː", "ɪ", "uː", "ʊ", "e", "ɜː", "ə", "ɔː", "æ", "ʌ", "ɑː", "ɒ", "eɪ", "aɪ", "ɔɪ", "aʊ", "oʊ", "ɪə", "eə", "ʊə", "p", "b", "t", "d", "k", "g", "tʃ", "dʒ", "f", "v", "θ", "ð", "s", "z", "ʃ", "ʒ", "h", "m", "n", "ŋ", "l", "r", "j", "w"
                                            };
}

<style>
    .phoneme {
        border: 2px solid #333;
        width: 60px;
        height: 60px;
        margin-top: 20px;
        text-align: center;
        font-size: 35px;
        font-weight: bold;
        border-radius: 10px;
        transition: transform 0.5s ease, background-color 0.5s ease;
        display: inline-block;
        position: relative;
    }

    .phoneme:hover{
        transform: scale(1.1)
    }
</style>

<h2>CreateManual</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Word, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input name="Word" class="form-control" required />
                <div id="errorMessage" style="color: red; display: none;"></div>
                @Html.ValidationMessageFor(model => model.Word, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phonetic, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 flex-grow-1 d-flex border border-1 rounded-2 bg-primary">
                <input name="Phonetic" class="form-control border-0 rounded-0" value="//"/>
                <button type="button" onclick="showKeyboard()" class="border-0 bg-primary me-2">
                    <i class="fa-regular fa-keyboard fa-xl p-1 ms-1" style="color: #ffffff"></i>
                </button>
                @Html.ValidationMessageFor(model => model.Phonetic, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Definition, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input name="Definition" class="form-control" />
                @Html.ValidationMessageFor(model => model.Definition, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10 mt-3">
                <button type="button" class="btn btn-success" onclick="fetchData()">Fetch</button>
                <input type="submit" id="submitBtn" value="Add" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    <div class="mt-3">
        <a href="/WoDs/Index" class="btn btn-warning">Back</a>
    </div>
</div>


@*Bàn phím nhập ký hiệu phonetic*@
<div style="position: relative; justify-content: center; flex: inherit" class="text-center">
    <div id="key_board" class="justify-content-center mx-auto text-center w-100" style="display: none; position: absolute">
        @{
            foreach (var phoneme in phonemes)
            {
                <button class="phoneme">@phoneme</button>
            }
        }
    </div>
</div>

<script>
    const dicApi = "https://api.dictionaryapi.dev/api/v2/entries/en/";

    let word = "";
    let phonetic = "N/a";
    let definition = "";

    function fetchData() {
        word = document.querySelector("input[name='Word']").value;
        let errorDiv = document.getElementById("errorMessage");

        console.log(word);

        fetch(dicApi.concat(word))
            .then(response => {
                if (response.ok) {
                    errorDiv.style.display = "none";
                    return response.json();
                }
                else {
                    if (response.status === 404) {
                        errorDiv.innerText = "Word not found";
                        errorDiv.style.display = "block";
                    }
                }
            })
            .then(data2 => {
                if (data2[0]["phonetics"].length > 0) {
                    if (data2[0]["phonetics"][0].hasOwnProperty("text")) {
                        phonetic = data2[0]["phonetics"][0]["text"];
                    } else if (data2[0]["phonetics"].length >= 1 && data2[0]["phonetics"][1].hasOwnProperty("text")) {
                        phonetic = data2[0]["phonetics"][1]["text"];
                    } else if (data2[0]["phonetics"].length >= 2 && data2[0]["phonetics"][2].hasOwnProperty("text")) {
                        phonetic = data2[0]["phonetics"][2]["text"];
                    }
                }

                definition = data2[0]["meanings"][0]["definitions"][0]["definition"];

                console.log(phonetic);
                console.log(definition);

                document.querySelector("input[name='Phonetic']").value = phonetic;
                document.querySelector("input[name='Definition']").value = definition;
            })
            .catch(error => {
                console.log(error);
            })

    }

    let keyboardState = false;
    function showKeyboard() {
        if (!keyboardState) {
            document.getElementById("key_board").style.display = "block";
        }
        else {
            document.getElementById("key_board").style.display = "none";
        }
        keyboardState = !keyboardState;
    }

    document.querySelectorAll(".phoneme").forEach(button => {
        button.addEventListener("click", function () {
            let phoneticInput = document.querySelector("input[name='Phonetic']").value;
            let length = phoneticInput.length;
            phoneticInput = phoneticInput.slice(0, length - 1) + this.innerHTML + phoneticInput.slice(length - 1);
            document.querySelector("input[name='Phonetic']").value = phoneticInput;
            console.log(length);
            console.log(phoneticInput);
        })
    })
</script>
